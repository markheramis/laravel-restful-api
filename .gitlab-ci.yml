variables:
  DB_HOST: mysql
  MYSQL_DATABASE: homestead
  MYSQL_USER: homestead
  MYSQL_PASSWORD: secret
  MYSQL_ROOT_PASSWORD: secret
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "100" # Tells git to fetch all the branches of the project, required by the analysis task
  DOCKER_DRIVER: overlay2
  CLAIR_OUTPUT: High

include:
  - template: Jobs/Code-Quality.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Code-Intelligence.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Code-Intelligence.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Secret-Detection.gitlab-ci.yml

stages:
  - build
  - test
  - analyse
  - deploy

build-docker:
  stage: build
  image: docker:stable
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $IMAGE .
    - docker push $IMAGE

  services:
    - docker:19.03.12-dind
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  only:
    - master

build-composer:
  image: lorisleiva/laravel-docker
  stage: build
  script:
    - cp .env.testing.example .env
    - composer install
  only:
    - pull_request
    - push
    - master
    - staging
    - production
  artifacts:
    paths:
      - .env
      - vendor/
      - storage/logs

artisan-test:
  image: lorisleiva/laravel-docker
  stage: test
  services:
    - mysql:8.0
  script:
    - php artisan key:generate
    - php artisan migrate
    - php artisan db:seed
    - php artisan passport:install
    - php artisan queue:work &
    - php artisan serve &
    - php artisan test --env=testing
  only:
    - pull_request
    - push
    - master
    - staging
    - production
  artifacts:
    paths:
      - storage/logs/
  dependencies:
    - build-composer

deploy_staging:
  image: lorisleiva/laravel-docker
  stage: deploy
  script:
    - php vendor/bin/envoy run deploy --branch=staging --refresh=true --host=${{PROJECT_STAGING_HOST}}
  only:
    - staging
  dependencies:
    - artisan-test

deploy_production:
  image: lorisleiva/laravel-docker
  stage: deploy
  script:
    - php vendor/bin/envoy run deploy --branch=production --host=${{PROJECT_PRODUCTION_HOST}}
  only:
    - production
  dependencies:
    - artisan-test

sonarcloud-check:
  stage: analyse
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  script:
    - sonar-scanner
  only:
    - master
  dependencies:
    - artisan-test

code_quality:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run code_quality in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run code_quality in pipelines for tags

code_intelligence_go:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run code_intelligence_go in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run code_intelligence_go in pipelines for tags

gemnasium-dependency_scanning:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run gemnasium-dependency_scanning in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run gemnasium-dependency_scanning in pipelines for tags

retire-js-dependency_scanning:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run retire-js-dependency_scanning in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run retire-js-dependency_scanning in pipelines for tags

container_scanning:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run container_scanning in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run container_scanning in pipelines for tags

phpcs-security-audit-sast:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run phpcs-security-audit-sast in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run phpcs-security-audit-sast in pipelines for tags

nodejs-scan-sast:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run nodejs-scan-sast in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run nodejs-scan-sast in pipelines for tags

eslint-sast:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run eslint-sast in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run eslint-sast in pipelines for tags

secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"
    GIT_DEPTH: 100
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run secret_detection in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run secret_detection in pipelines for tags

license_scanning:
  stage: analyse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"' # Run license_scanning in pipelines on the master branch (but not in other branch pipelines)
    - if: "$CI_COMMIT_TAG" # Run license_scanning in pipelines for tags
